import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatPermissions
from datetime import timedelta
import re
import random


API_TOKEN = "7778634250:AAHlgfUNEG246xkQDKh2iIOC3qX1xduG_HQ"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
print("start")

COMMAND_PREFIXES = ["–ë–æ—Ç ", "–±–æ—Ç ", "Bot ", "bot "]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
WARNINGS_FILE = "warnings.txt"

BAD_WORDS = [
    "–±–ª—è–¥—å", "—Å—É–∫–∞", "–ø–∏–∑–¥–∞", "—Ö—É–π", "–µ–±–∞—Ç—å", "–µ–±–ª–∞–Ω", "—Ö–µ—Ä", "—Ç–≤–∞—Ä—å", "–º—É–¥–∏–ª–∞", "–¥—Ä–æ—á–∏—Ç—å", 
    "–ø–∏–¥–æ—Ä", "–ø–∏–∑–¥–µ—Ü", "—à–ª—é—Ö–∞", "—Å—É—á–∫–∞", "–≥–æ–Ω–¥–æ–Ω", "–ø–µ–¥–∏–∫", "–≥–∞–Ω–¥–æ–Ω", "—Ö—É–µ—Ç–∞", "–æ—Ö—É–µ—Ç—å", 
    "–Ω–∞—Ö—É–π", "–µ–±–∞–Ω—ã–π", "—Å—Ä–∞–∫–∞", "–ø–∏–¥–æ—Ä–∞—Å", "—Ç—É–ø–∞—è", "–¥—É—Ä–∞", "–µ–±—É—á–∏–π", "–º—É–¥—Ä–µ—Ü", "—É—Ä–æ–¥", 
    "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π", "–±–ª—è–¥—å", "—á–º–æ", "–ø–æ—Ö—É–π", "—Å–æ—Å–∞—Ç—å", "—É—Ä–æ–¥–∫–∞", "–ø–µ—Ç—É—Ö", "–¥–æ–ª–±–æ–µ–±", "–∫–æ–∑–µ–ª",
    "—Å—É—á–∏–π", "–∫—É—Ä–≤–∞", "–ø–∏–∑–¥–∞—Ç—ã–π", "—Å—É–∫–∞ –±–ª—è—Ç—å", "–ø–∏–∑–¥–∞—Ç–∏–Ω–∞", "—Ö–µ—Ä–æ–≤–∏–Ω–∞", "–º–∞—Ç—å —Ç–≤–æ—é", "–ø–∏–∑–¥–∏–Ω", 
    "–µ–±–∞–ª–æ", "—Å—É—á–∞—Ä", "–ø–∏–∑–¥—é–∫", "–ø–µ–¥–∏–∫", "–¥–µ—Ä—å–º–æ", "–≥–æ–≤–Ω–æ", "–¥–æ–ª–±–∞–Ω—É—Ç—ã–π", "—É–±–ª—é–¥–æ–∫", "–≤—Å–µ —Ö—Ä–µ–Ω–æ–≤–æ",
    "–ë–ª—è–¥—å", "–°—É–∫–∞", "–ü–∏–∑–¥–∞", "–•—É–π", "–ï–±–∞—Ç—å", "–ï–±–ª–∞–Ω", "–•–µ—Ä", "–¢–≤–∞—Ä—å", "–ú—É–¥–∏–ª–∞", "–î—Ä–æ—á–∏—Ç—å", 
    "–ü–∏–¥–æ—Ä", "–ü–∏–∑–¥–µ—Ü", "–®–ª—é—Ö–∞", "–°—É—á–∫–∞", "–ì–æ–Ω–¥–æ–Ω", "–ü–µ–¥–∏–∫", "–ì–∞–Ω–¥–æ–Ω", "–•—É–µ—Ç–∞", "–û—Ö—É–µ—Ç—å", 
    "–ù–∞—Ö—É–π", "–ï–±–∞–Ω—ã–π", "–°—Ä–∞–∫–∞", "–ü–∏–¥–æ—Ä–∞—Å", "–¢—É–ø–∞—è", "–î—É—Ä–∞", "–ï–±—É—á–∏–π", "–ú—É–¥—Ä–µ—Ü", "–£—Ä–æ–¥", 
    "–ü–æ—à–µ–ª –Ω–∞—Ö—É–π", "–ë–ª—è–¥—å", "–ß–º–æ", "–ü–æ—Ö—É–π", "–°–æ—Å–∞—Ç—å", "–£—Ä–æ–¥–∫–∞", "–ü–µ—Ç—É—Ö", "–î–æ–ª–±–æ–µ–±", "–ö–æ–∑–µ–ª",
    "–°—É—á–∏–π", "–ö—É—Ä–≤–∞", "–ü–∏–∑–¥–∞—Ç—ã–π", "–°—É–∫–∞ –ë–ª—è—Ç—å", "–ü–∏–∑–¥–∞—Ç–∏–Ω–∞", "–•–µ—Ä–æ–≤–∏–Ω–∞", "–ú–∞—Ç—å –¢–≤–æ—é", "–ü–∏–∑–¥–∏–Ω", 
    "–ï–±–∞–ª–æ", "–°—É—á–∞—Ä", "–ü–∏–∑–¥—é–∫", "–ü–µ–¥–∏–∫", "–î–µ—Ä—å–º–æ", "–ì–æ–≤–Ω–æ", "–î–æ–ª–±–∞–Ω—É—Ç—ã–π", "–£–±–ª—é–¥–æ–∫", "–í—Å–µ –•—Ä–µ–Ω–æ–≤–æ",
    "–ë–ª—è–¥—å", "–°—É–∫–∞", "–ü–∏–∑–¥–∞", "–•—É–π", "–ï–±–∞—Ç—å", "–ï–±–ª–∞–Ω", "–•–µ—Ä", "–¢–≤–∞—Ä—å", "–ú—É–¥–∏–ª–∞", "–î—Ä–æ—á–∏—Ç—å", 
    "–ü–∏–¥–æ—Ä", "–ü–∏–∑–¥–µ—Ü", "–®–ª—é—Ö–∞", "–°—É—á–∫–∞", "–ì–æ–Ω–¥–æ–Ω", "–ü–µ–¥–∏–∫", "–ì–∞–Ω–¥–æ–Ω", "–•—É–µ—Ç–∞", "–û—Ö—É–µ—Ç—å", 
    "–ù–∞—Ö—É–π", "–ï–±–∞–Ω—ã–π", "–°—Ä–∞–∫–∞", "–ü–∏–¥–æ—Ä–∞—Å", "–¢—É–ø–∞—è", "–î—É—Ä–∞", "–ï–±—É—á–∏–π", "–ú—É–¥—Ä–µ—Ü", "–£—Ä–æ–¥", 
    "–ü–æ—à–µ–ª –ù–∞—Ö—É–π", "–ë–ª—è–¥—å", "–ß–º–æ", "–ü–æ—Ö—É–π", "–°–æ—Å–∞—Ç—å", "–£—Ä–æ–¥–∫–∞", "–ü–µ—Ç—É—Ö", "–î–æ–ª–±–æ–µ–±", "–ö–æ–∑–µ–ª",
    "–°—É—á–∏–π", "–ö—É—Ä–≤–∞", "–ü–∏–∑–¥–∞—Ç—ã–π", "–°—É–∫–∞ –ë–ª—è—Ç—å", "–ü–∏–∑–¥–∞—Ç–∏–Ω–∞", "–•–µ—Ä–æ–≤–∏–Ω–∞", "–ú–∞—Ç—å –¢–≤–æ—é", "–ü–∏–∑–¥–∏–Ω", 
    "–ï–±–∞–ª–æ", "–°—É—á–∞—Ä", "–ü–∏–∑–¥—é–∫", "–ü–µ–¥–∏–∫", "–î–µ—Ä—å–º–æ", "–ì–æ–≤–Ω–æ", "–î–æ–ª–±–∞–Ω—É—Ç—ã–π", "–£–±–ª—é–¥–æ–∫", "–í—Å–µ –•—Ä–µ–Ω–æ–≤–æ",
    "–ë–õ–Ø–î–¨", "–°–£–ö–ê", "–ü–ò–ó–î–ê", "–•–£–ô", "–ï–ë–ê–¢–¨", "–ï–ë–õ–ê–ù", "–•–ï–†", "–¢–í–ê–†–¨", "–ú–£–î–ò–õ–ê", "–î–†–û–ß–ò–¢–¨", 
    "–ü–ò–î–û–†", "–ü–ò–ó–î–ï–¶", "–®–õ–Æ–•–ê", "–°–£–ß–ö–ê", "–ì–û–ù–î–û–ù", "–ü–ï–î–ò–ö", "–ì–ê–ù–î–û–ù", "–•–£–ï–¢–ê", "–û–•–£–ï–¢–¨", 
    "–ù–ê–•–£–ô", "–ï–ë–ê–ù–´–ô", "–°–†–ê–ö–ê", "–ü–ò–î–û–†–ê–°", "–¢–£–ü–ê–Ø", "–î–£–†–ê", "–ï–ë–£–ß–ò–ô", "–ú–£–î–†–ï–¶", "–£–†–û–î", 
    "–ü–û–®–ï–õ –ù–ê–•–£–ô", "–ë–õ–Ø–î–¨", "–ß–ú–û", "–ü–û–•–£–ô", "–°–û–°–ê–¢–¨", "–£–†–û–î–ö–ê", "–ü–ï–¢–£–•", "–î–û–õ–ë–û–ï–ë", "–ö–û–ó–ï–õ",
    "–°–£–ß–ò–ô", "–ö–£–†–í–ê", "–ü–ò–ó–î–ê–¢–´–ô", "–°–£–ö–ê –ë–õ–Ø–¢–¨", "–ü–ò–ó–î–ê–¢–ò–ù–ê", "–•–ï–†–û–í–ò–ù–ê", "–ú–ê–¢–¨ –¢–í–û–Æ", "–ü–ò–ó–î–ò–ù", 
    "–ï–ë–ê–õ–û", "–°–£–ß–ê–†", "–ü–ò–ó–î–Æ–ö", "–ü–ï–î–ò–ö", "–î–ï–†–¨–ú–û", "–ì–û–í–ù–û", "–î–û–õ–ë–ê–ù–£–¢–´–ô", "–£–ë–õ–Æ–î–û–ö", "–í–°–ï –•–†–ï–ù–û–í–û",
    # –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤ –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é...
]

hll = [
    "Hello", "hello", "–ø—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç", "Hi", "hi", "–ø—Ä–∏–≤", "–ü—Ä–∏–≤", "–ø—Ä", "–ü—Ä", "–ó–¥–∞—Ä–æ–≤–∞", "–∑–¥–∞—Ä–æ–≤–∞",
]

by = [
    "Bye", "bye", "–ü–æ–∫–∞", "–ø–æ–∫–∞", "–ø–æ–∫–µ–¥–∞", "–ü–æ–∫–µ–¥–∞", "–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è", "–î–æ—Å–≤–∏–¥–∞–Ω–∏—è", "–¥–æ—Å–≤–∏–¥–æ—Å", "–î–æ—Å–≤–∏–¥–æ—Å", "–ß–∞–æ", "—á–∞–æ",
]

gn = [
    "good night", "Good night", "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "–°–ø–æ–∫–∏ –Ω–æ–∫–∏", "—Å–ø–æ–∫–∏ –Ω–æ–∫–∏", "–°–ø–æ–∫–æ–π–Ω–æ–π", "—Å–ø–æ–∫–æ–π–Ω–æ–π", "—Å–ø", "–°–ø",
]

rgn = [
    "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ üò¥", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ ü•±", "–°–ø–æ–∫–æ–π–Ω–æ–π üò¥", "—Å–ø–æ–∫–æ–π–Ω–æ–π ü•±",
]

rdb = [
    "–ü–æ–∫–∞ ü§ö", "–ø–æ–∫–∞ üëã", "–ø–æ–∫–µ–¥–∞", "–ü–æ–∫–µ–¥–∞ ü§ö", "–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è üëã", "–î–æ—Å–≤–∏–¥–∞–Ω–∏—è", "–¥–æ—Å–≤–∏–¥–æ—Å ü§ö", "–î–æ—Å–≤–∏–¥–æ—Å", "–ß–∞–æ üëã", "—á–∞–æ ü§ö",
]

rndm = [
    "–ø—Ä–∏–≤–µ—Ç ‚úã", "–ü—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤ üôã‚Äç‚ôÇÔ∏è", "–ü—Ä–∏–≤ üëã", "–ø—Ä", "–ü—Ä", "–ó–¥–∞—Ä–æ–≤–∞ üñêÔ∏è", "–∑–¥–∞—Ä–æ–≤–∞",
]

def read_file(filename):
    data = {}
    try:
        with open(filename, "r") as f:
            for line in f:
                username, count = line.strip().split(": ")
                data[username] = int(count)
    except FileNotFoundError:
        pass
    return data

def write_file(data, filename):
    with open(filename, "w") as f:
        for username, count in data.items():
            f.write(f"{username}: {count}\n")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤
def contains_bad_word(text):
    pattern = r'\b(?:' + '|'.join(map(re.escape, BAD_WORDS)) + r')\b'
    return re.search(pattern, text, re.IGNORECASE)

def hello(text):
    pattern = r'\b(?:' + '|'.join(map(re.escape, hll)) + r')\b'
    return re.search(pattern, text, re.IGNORECASE)

def bye(text):
    pattern = r'\b(?:' + '|'.join(map(re.escape, by)) + r')\b'
    return re.search(pattern, text, re.IGNORECASE)

def good_night(text):
    pattern = r'\b(?:' + '|'.join(map(re.escape, gn)) + r')\b'
    return re.search(pattern, text, re.IGNORECASE)

def add_warning(username):
    warnings = read_file(WARNINGS_FILE)
    warnings[username] = warnings.get(username, 0) + 1
    write_file(warnings, WARNINGS_FILE)

def get_warnings(username):
    warnings = read_file(WARNINGS_FILE)
    return warnings.get(username, 0)

def reset_warnings(username):
    warnings = read_file(WARNINGS_FILE)
    warnings.pop(username, None)
    write_file(warnings, WARNING_FILE)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
def has_prefix(message_text):
    for prefix in COMMAND_PREFIXES:
        if message_text.startswith(prefix):
            return True
    return False

def remove_prefix(message_text):
    for prefix in COMMAND_PREFIXES:
        if message_text.startswith(prefix):
            return message_text[len(prefix):].strip()
    return message_text

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
@dp.message()
async def handle_commands(message: types.Message):
    if "start" in message.text:
        username = message.from_user.username or message.from_user.full_name
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç {username}, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

    elif "warn" in message.text:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        username = message.reply_to_message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        add_warning(username)
        warning_count = get_warnings(username)
        await message.answer(f"{username} —è –¥–∞—é —Ç–µ–±–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_count}. ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è")

        if warning_count >= 3:
            await temp_ban(message.reply_to_message, 1)
            await message.answer(f"{username} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ 3 –Ω–∞—Ä—É—à–µ–Ω–∏—è.")
            reset_warnings(username)

    elif "ban" in message.text:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await message.chat.ban(message.reply_to_message.from_user.id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username}. –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω")

    elif "pardon" in message.text:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await bot.unban_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id)
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=message.reply_to_message.from_user.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
        )
        await message.answer(f"{message.reply_to_message.from_user.username} –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è.")

    elif "clear" in message.text:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        async for msg in bot.get_chat_history(message.chat.id, limit=10):
            if msg.from_user.id == message.reply_to_message.from_user.id:
                await msg.delete()

        await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {message.reply_to_message.from_user.username} –±—ã–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã.")

    elif "mute" in message.text:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        mute_duration = timedelta(minutes=10)
        until_date = message.date + mute_duration

        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=message.reply_to_message.from_user.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.reply_to_message.from_user.username} –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç.")

    elif "unmute" in message.text:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=message.reply_to_message.from_user.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
        )
        await message.answer(f"{message.reply_to_message.from_user.username} —Ç–µ–±–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å.")

    elif hello(message.text):
        rdm = random.choice(rndm)
        await message.reply(rdm)

    elif bye(message.text):
        rdby = random.choice(rdb)
        await message.reply(rdby)

    elif good_night(message.text):
        rdgn = random.choice(rgn)
        await message.reply(rdgn)

    elif not has_prefix(message.text):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è 
    command_body = remove_prefix(message.text)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    args = command_body.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    command = args[0].lower()
    arg_text = args[1] if len(args) > 1 else ""

    if command == "–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å":
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        username = message.reply_to_message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        add_warning(username)
        warning_count = get_warnings(username)
        await message.answer(f"{username} —è –¥–∞—é —Ç–µ–±–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_count}. ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è")

        if warning_count >= 3:
            await temp_ban(message.reply_to_message, 1)
            await message.answer(f"{username} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ 3 –Ω–∞—Ä—É—à–µ–Ω–∏—è.")
            reset_warnings(username)

    elif command == "–∑–∞–±–∞–Ω–∏—Ç—å":
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await message.chat.ban(message.reply_to_message.from_user.id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} –∑–∞–±–∞–Ω–µ–Ω.")

    elif command == "—Ä–∞–∑–±–∞–Ω–∏—Ç—å":
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await bot.unban_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id)
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=message.reply_to_message.from_user.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
        )
        await message.answer(f"{message.reply_to_message.from_user.username} –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è.")

    elif command == "–æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è":
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        async for msg in bot.get_chat_history(message.chat.id, limit=10):
            if msg.from_user.id == message.reply_to_message.from_user.id:
                await msg.delete()

        await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {message.reply_to_message.from_user.username} —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã.")

    elif command == "–º—É—Ç":
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        mute_duration = timedelta(minutes=10)
        until_date = message.date + mute_duration

        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=message.reply_to_message.from_user.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.reply_to_message.from_user.username} –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç.")

    elif command == "—Ä–∞–∑–º—É—Ç":
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=message.reply_to_message.from_user.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
        )
        await message.answer(f"{message.reply_to_message.from_user.username} —Ç–µ–±–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å.")

# –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∞
async def temp_ban(message: types.Message, days: int):
    until_date = message.date + timedelta(days=days)
    await bot.restrict_chat_member(
        chat_id=message.chat.id,
        user_id=message.from_user.id,
        permissions=ChatPermissions(can_send_messages=False),
        until_date=until_date,
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
