import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatPermissions
from dotenv import load_dotenv
import os
import logging
import sqlite3
import re
import random
from datetime import timedelta

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
if not API_TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_API_TOKEN. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞.")

COMMAND_PREFIXES = ["–ë–æ—Ç ", "–±–æ—Ç ", "Bot ", "bot "]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã

BAD_WORDS = [
    "–±–ª—è–¥—å", "—Å—É–∫–∞", "–ø–∏–∑–¥–∞", "—Ö—É–π", "–µ–±–∞—Ç—å", "–µ–±–ª–∞–Ω", "—Ö–µ—Ä", "—Ç–≤–∞—Ä—å", "–º—É–¥–∏–ª–∞", "–¥—Ä–æ—á–∏—Ç—å", 
    "–ø–∏–¥–æ—Ä", "–ø–∏–∑–¥–µ—Ü", "—à–ª—é—Ö–∞", "—Å—É—á–∫–∞", "–≥–æ–Ω–¥–æ–Ω", "–ø–µ–¥–∏–∫", "–≥–∞–Ω–¥–æ–Ω", "—Ö—É–µ—Ç–∞", "–æ—Ö—É–µ—Ç—å", 
    "–Ω–∞—Ö—É–π", "–µ–±–∞–Ω—ã–π", "—Å—Ä–∞–∫–∞", "–ø–∏–¥–æ—Ä–∞—Å", "—Ç—É–ø–∞—è", "–¥—É—Ä–∞", "–µ–±—É—á–∏–π", "–º—É–¥—Ä–µ—Ü", "—É—Ä–æ–¥", 
    "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π", "–±–ª—è–¥—å", "—á–º–æ", "–ø–æ—Ö—É–π", "—Å–æ—Å–∞—Ç—å", "—É—Ä–æ–¥–∫–∞", "–ø–µ—Ç—É—Ö", "–¥–æ–ª–±–æ–µ–±", "–∫–æ–∑–µ–ª",
    "—Å—É—á–∏–π", "–∫—É—Ä–≤–∞", "–ø–∏–∑–¥–∞—Ç—ã–π", "—Å—É–∫–∞ –±–ª—è—Ç—å", "–ø–∏–∑–¥–∞—Ç–∏–Ω–∞", "—Ö–µ—Ä–æ–≤–∏–Ω–∞", "–º–∞—Ç—å —Ç–≤–æ—é", "–ø–∏–∑–¥–∏–Ω", 
    "–µ–±–∞–ª–æ", "—Å—É—á–∞—Ä", "–ø–∏–∑–¥—é–∫", "–ø–µ–¥–∏–∫", "–¥–µ—Ä—å–º–æ", "–≥–æ–≤–Ω–æ", "–¥–æ–ª–±–∞–Ω—É—Ç—ã–π", "—É–±–ª—é–¥–æ–∫", "–≤—Å–µ —Ö—Ä–µ–Ω–æ–≤–æ",
    "–ë–ª—è–¥—å", "–°—É–∫–∞", "–ü–∏–∑–¥–∞", "–•—É–π", "–ï–±–∞—Ç—å", "–ï–±–ª–∞–Ω", "–•–µ—Ä", "–¢–≤–∞—Ä—å", "–ú—É–¥–∏–ª–∞", "–î—Ä–æ—á–∏—Ç—å", 
    "–ü–∏–¥–æ—Ä", "–ü–∏–∑–¥–µ—Ü", "–®–ª—é—Ö–∞", "–°—É—á–∫–∞", "–ì–æ–Ω–¥–æ–Ω", "–ü–µ–¥–∏–∫", "–ì–∞–Ω–¥–æ–Ω", "–•—É–µ—Ç–∞", "–û—Ö—É–µ—Ç—å", 
    "–ù–∞—Ö—É–π", "–ï–±–∞–Ω—ã–π", "–°—Ä–∞–∫–∞", "–ü–∏–¥–æ—Ä–∞—Å", "–¢—É–ø–∞—è", "–î—É—Ä–∞", "–ï–±—É—á–∏–π", "–ú—É–¥—Ä–µ—Ü", "–£—Ä–æ–¥", 
    "–ü–æ—à–µ–ª –Ω–∞—Ö—É–π", "–ë–ª—è–¥—å", "–ß–º–æ", "–ü–æ—Ö—É–π", "–°–æ—Å–∞—Ç—å", "–£—Ä–æ–¥–∫–∞", "–ü–µ—Ç—É—Ö", "–î–æ–ª–±–æ–µ–±", "–ö–æ–∑–µ–ª",
    "–°—É—á–∏–π", "–ö—É—Ä–≤–∞", "–ü–∏–∑–¥–∞—Ç—ã–π", "–°—É–∫–∞ –ë–ª—è—Ç—å", "–ü–∏–∑–¥–∞—Ç–∏–Ω–∞", "–•–µ—Ä–æ–≤–∏–Ω–∞", "–ú–∞—Ç—å –¢–≤–æ—é", "–ü–∏–∑–¥–∏–Ω", 
    "–ï–±–∞–ª–æ", "–°—É—á–∞—Ä", "–ü–∏–∑–¥—é–∫", "–ü–µ–¥–∏–∫", "–î–µ—Ä—å–º–æ", "–ì–æ–≤–Ω–æ", "–î–æ–ª–±–∞–Ω—É—Ç—ã–π", "–£–±–ª—é–¥–æ–∫", "–í—Å–µ –•—Ä–µ–Ω–æ–≤–æ",
    "–ë–ª—è–¥—å", "–°—É–∫–∞", "–ü–∏–∑–¥–∞", "–•—É–π", "–ï–±–∞—Ç—å", "–ï–±–ª–∞–Ω", "–•–µ—Ä", "–¢–≤–∞—Ä—å", "–ú—É–¥–∏–ª–∞", "–î—Ä–æ—á–∏—Ç—å", 
    "–ü–∏–¥–æ—Ä", "–ü–∏–∑–¥–µ—Ü", "–®–ª—é—Ö–∞", "–°—É—á–∫–∞", "–ì–æ–Ω–¥–æ–Ω", "–ü–µ–¥–∏–∫", "–ì–∞–Ω–¥–æ–Ω", "–•—É–µ—Ç–∞", "–û—Ö—É–µ—Ç—å", 
    "–ù–∞—Ö—É–π", "–ï–±–∞–Ω—ã–π", "–°—Ä–∞–∫–∞", "–ü–∏–¥–æ—Ä–∞—Å", "–¢—É–ø–∞—è", "–î—É—Ä–∞", "–ï–±—É—á–∏–π", "–ú—É–¥—Ä–µ—Ü", "–£—Ä–æ–¥", 
    "–ü–æ—à–µ–ª –ù–∞—Ö—É–π", "–ë–ª—è–¥—å", "–ß–º–æ", "–ü–æ—Ö—É–π", "–°–æ—Å–∞—Ç—å", "–£—Ä–æ–¥–∫–∞", "–ü–µ—Ç—É—Ö", "–î–æ–ª–±–æ–µ–±", "–ö–æ–∑–µ–ª",
    "–°—É—á–∏–π", "–ö—É—Ä–≤–∞", "–ü–∏–∑–¥–∞—Ç—ã–π", "–°—É–∫–∞ –ë–ª—è—Ç—å", "–ü–∏–∑–¥–∞—Ç–∏–Ω–∞", "–•–µ—Ä–æ–≤–∏–Ω–∞", "–ú–∞—Ç—å –¢–≤–æ—é", "–ü–∏–∑–¥–∏–Ω", 
    "–ï–±–∞–ª–æ", "–°—É—á–∞—Ä", "–ü–∏–∑–¥—é–∫", "–ü–µ–¥–∏–∫", "–î–µ—Ä—å–º–æ", "–ì–æ–≤–Ω–æ", "–î–æ–ª–±–∞–Ω—É—Ç—ã–π", "–£–±–ª—é–¥–æ–∫", "–í—Å–µ –•—Ä–µ–Ω–æ–≤–æ",
    "–ë–õ–Ø–î–¨", "–°–£–ö–ê", "–ü–ò–ó–î–ê", "–•–£–ô", "–ï–ë–ê–¢–¨", "–ï–ë–õ–ê–ù", "–•–ï–†", "–¢–í–ê–†–¨", "–ú–£–î–ò–õ–ê", "–î–†–û–ß–ò–¢–¨", 
    "–ü–ò–î–û–†", "–ü–ò–ó–î–ï–¶", "–®–õ–Æ–•–ê", "–°–£–ß–ö–ê", "–ì–û–ù–î–û–ù", "–ü–ï–î–ò–ö", "–ì–ê–ù–î–û–ù", "–•–£–ï–¢–ê", "–û–•–£–ï–¢–¨", 
    "–ù–ê–•–£–ô", "–ï–ë–ê–ù–´–ô", "–°–†–ê–ö–ê", "–ü–ò–î–û–†–ê–°", "–¢–£–ü–ê–Ø", "–î–£–†–ê", "–ï–ë–£–ß–ò–ô", "–ú–£–î–†–ï–¶", "–£–†–û–î", 
    "–ü–û–®–ï–õ –ù–ê–•–£–ô", "–ë–õ–Ø–î–¨", "–ß–ú–û", "–ü–û–•–£–ô", "–°–û–°–ê–¢–¨", "–£–†–û–î–ö–ê", "–ü–ï–¢–£–•", "–î–û–õ–ë–û–ï–ë", "–ö–û–ó–ï–õ",
    "–°–£–ß–ò–ô", "–ö–£–†–í–ê", "–ü–ò–ó–î–ê–¢–´–ô", "–°–£–ö–ê –ë–õ–Ø–¢–¨", "–ü–ò–ó–î–ê–¢–ò–ù–ê", "–•–ï–†–û–í–ò–ù–ê", "–ú–ê–¢–¨ –¢–í–û–Æ", "–ü–ò–ó–î–ò–ù", 
    "–ï–ë–ê–õ–û", "–°–£–ß–ê–†", "–ü–ò–ó–î–Æ–ö", "–ü–ï–î–ò–ö", "–î–ï–†–¨–ú–û", "–ì–û–í–ù–û", "–î–û–õ–ë–ê–ù–£–¢–´–ô", "–£–ë–õ–Æ–î–û–ö", "–í–°–ï –•–†–ï–ù–û–í–û",
    # –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤ –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é...
]

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤
BAD_WORDS_PATTERN = re.compile(r'\b(?:' + '|'.join(map(re.escape, BAD_WORDS)) + r')\b', re.IGNORECASE)

# –°–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, –ø—Ä–æ—â–∞–Ω–∏–π –∏ —Ç.–¥.
RESPONSES = {
    "hello": ["–ø—Ä–∏–≤–µ—Ç ‚úã", "–ü—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤ üôã‚Äç‚ôÇÔ∏è", "–ü—Ä–∏–≤ üëã", "–∑–¥–∞—Ä–æ–≤–∞ üñêÔ∏è", "–ó–¥–∞—Ä–æ–≤–∞"],
    "bye": ["–ü–æ–∫–∞ ü§ö", "–ø–æ–∫–∞ üëã", "–ø–æ–∫–µ–¥–∞", "–î–æ—Å–≤–∏–¥–∞–Ω–∏—è üëã", "–î–æ—Å–≤–∏–¥–æ—Å ü§ö", "—á–∞–æ üëã"],
    "good_night": ["–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ üò¥", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ ü•±", "–°–ø–æ–∫–æ–π–Ω–æ–π üò¥", "—Å–ø–æ–∫–æ–π–Ω–æ–π ü•±"]
}

HELLO_PATTERN = re.compile(r'\b(?:–ø—Ä–∏–≤–µ—Ç|–∑–¥–∞—Ä–æ–≤–∞|hi|hello)\b', re.IGNORECASE)
BYE_PATTERN = re.compile(r'\b(?:–ø–æ–∫–∞|–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è|bye|—á–∞–æ)\b', re.IGNORECASE)
GOOD_NIGHT_PATTERN = re.compile(r'\b(?:—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏|good night)\b', re.IGNORECASE)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("warnings.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS warnings (
    username TEXT PRIMARY KEY,
    count INTEGER DEFAULT 0
)
""")
conn.commit()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def add_warning(username):
    cursor.execute("""
    INSERT INTO warnings (username, count)
    VALUES (?, 1)
    ON CONFLICT(username) DO UPDATE SET count = count + 1
    """, (username,))
    conn.commit()
    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

def get_warnings(username):
    cursor.execute("SELECT count FROM warnings WHERE username = ?", (username,))
    result = cursor.fetchone()
    return result[0] if result else 0

def reset_warnings(username):
    cursor.execute("DELETE FROM warnings WHERE username = ?", (username,))
    conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
def contains_bad_word(text):
    return BAD_WORDS_PATTERN.search(text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –ø—Ä–æ—â–∞–Ω–∏—è –∏ —Ç.–¥.
def match_pattern(text, pattern):
    return bool(pattern.search(text))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
def has_prefix(message_text):
    return any(message_text.startswith(prefix) for prefix in COMMAND_PREFIXES)

def remove_prefix(message_text):
    for prefix in COMMAND_PREFIXES:
        if message_text.startswith(prefix):
            return message_text[len(prefix):].strip()
    return message_text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text}")

    if contains_bad_word(message.text):
        username = message.from_user.username or message.from_user.full_name
        add_warning(username)
        warning_count = get_warnings(username)
        await message.reply(f"–ê–π –∞–π –∞–π {username}, –Ω–µ–ª—å–∑—è –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è! –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_count}.")
        
        if warning_count >= 3:
            await temp_ban(message, 1)
            await message.reply(f"{username} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ 3 –Ω–∞—Ä—É—à–µ–Ω–∏—è.")
            reset_warnings(username)

    if match_pattern(message.text, HELLO_PATTERN):
        await message.reply(random.choice(RESPONSES["hello"]))

    if match_pattern(message.text, BYE_PATTERN):
        await message.reply(random.choice(RESPONSES["bye"]))

    if match_pattern(message.text, GOOD_NIGHT_PATTERN):
        await message.reply(random.choice(RESPONSES["good_night"]))

    if not has_prefix(message.text):
        return

    command_body = remove_prefix(message.text)
    args = command_body.split(maxsplit=1)
    command = args[0].lower()
    arg_text = args[1] if len(args) > 1 else ""

    if command in ["–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å", "–∑–∞–±–∞–Ω–∏—Ç—å", "—Ä–∞–∑–±–∞–Ω–∏—Ç—å"] and not message.reply_to_message:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    if command == "–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å":
        username = message.reply_to_message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        add_warning(username)
        warning_count = get_warnings(username)
        await message.answer(f"{username}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_count}.")

    elif command == "–∑–∞–±–∞–Ω–∏—Ç—å":
        await message.chat.ban(message.reply_to_message.from_user.id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    elif command == "—Ä–∞–∑–±–∞–Ω–∏—Ç—å":
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id)
        await message.answer(f"{message.reply_to_message.from_user.username} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω
async def temp_ban(message: types.Message, days: int):
    until_date = message.date + timedelta(days=days)
    await bot.restrict_chat_member(
        chat_id=message.chat.id,
        user_id=message.from_user.id,
        permissions=ChatPermissions(can_send_messages=False),
        until_date=until_date,
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
